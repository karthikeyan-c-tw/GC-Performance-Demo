apiVersion: v1
kind: Namespace
metadata:
  name: gc-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-g1
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perf-demo-g1
      gc: g1
  template:
    metadata:
      labels:
        app: perf-demo-g1
        gc: g1
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: g1-app
          image: load-app:latest
          imagePullPolicy: Never
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Xms500m -Xmx500m -XX:+UseG1GC"
          ports:
            - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-zgc
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perf-demo-zgc
      gc: zgc
  template:
    metadata:
      labels:
        app: perf-demo-zgc
        gc: zgc
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: zgc-app
          image: load-app:latest
          imagePullPolicy: Never
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Xms500m -Xmx500m -XX:+UseZGC"
          ports:
            - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-shenandoah
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perf-demo-shenandoah
      gc: shenandoah
  template:
    metadata:
      labels:
        app: perf-demo-shenandoah
        gc: shenandoah
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: shenandoah-app
          image: load-app:latest
          imagePullPolicy: Never
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Xms500m -Xmx500m -XX:+UseShenandoahGC"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: perf-demo-g1-svc
  namespace: gc-demo
  labels:
    app: perf-demo-g1
    gc: g1
spec:
  selector:
    app: perf-demo-g1
    gc: g1
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: perf-demo-zgc-svc
  namespace: gc-demo
  labels:
    app: perf-demo-zgc
    gc: zgc
spec:
  selector:
    app: perf-demo-zgc
    gc: zgc
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: perf-demo-shenandoah-svc
  namespace: gc-demo
  labels:
    app: perf-demo-shenandoah
    gc: shenandoah
spec:
  selector:
    app: perf-demo-shenandoah
    gc: shenandoah
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: gc-demo
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'perf-demo'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - gc-demo
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: perf-demo.*
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_service_label_gc]
            target_label: gc
        metrics_path: /actuator/prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.55.1
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: gc-demo
spec:
  selector:
    app: prometheus
  ports:
    - name: http
      port: 9090
      targetPort: 9090
  type: NodePort
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: gc-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources: ["nodes","nodes/proxy","services","endpoints","pods"]
    verbs: ["get","list","watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: gc-demo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: gc-demo
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.gc-demo.svc.cluster.local:9090
        isDefault: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.2
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: gc-demo
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-serial
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perf-demo-serial
      gc: serial
  template:
    metadata:
      labels:
        app: perf-demo-serial
        gc: serial
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: serial-app
          image: load-app:latest
          imagePullPolicy: Never
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Xms500m -Xmx500m -XX:+UseSerialGC"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: perf-demo-serial-svc
  namespace: gc-demo
  labels:
    app: perf-demo-serial
    gc: serial
spec:
  selector:
    app: perf-demo-serial
    gc: serial
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-parallel
  namespace: gc-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perf-demo-parallel
      gc: parallel
  template:
    metadata:
      labels:
        app: perf-demo-parallel
        gc: parallel
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: parallel-app
          image: load-app:latest
          imagePullPolicy: Never
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "1Gi"
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-Xms500m -Xmx500m -XX:+UseParallelGC"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: perf-demo-parallel-svc
  namespace: gc-demo
  labels:
    app: perf-demo-parallel
    gc: parallel
spec:
  selector:
    app: perf-demo-parallel
    gc: parallel
  ports:
    - name: http
      port: 8080
      targetPort: 8080